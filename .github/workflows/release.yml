name: Release on Tag

on:
  push:
    tags:
      - "*"   # runs for any pushed tag

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # required for GitVersion and tag history

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x" # adjust if needed

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v3
        with:
          versionSpec: "5.x"

      - name: Determine version with GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3

      - name: Build Locale
        run: |
          mkdir -p build/TTT/lang
          dotnet restore Locale/Locale.csproj
          dotnet build Locale/Locale.csproj --no-restore -c Release
          cp lang/*.json build/TTT/lang

      - name: Publish Plugin
        run: |
          dotnet restore TTT/Plugin/Plugin.csproj
          dotnet publish TTT/Plugin/Plugin.csproj --no-restore -c Release -o build/TTT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TTT
          path: build/TTT
          if-no-files-found: error

      - name: Check if tag commit is on main
        id: branch_check
        shell: bash
        run: |
          if git branch -r --contains "$GITHUB_SHA" | grep -qE 'origin/main'; then
            echo "is_main=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_main=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Find previous tag
        id: prev
        shell: bash
        run: |
          git fetch --tags --force
          # nearest prior tag reachable from this commit, excluding the current tag
          PREV=$(git describe --tags --abbrev=0 "${GITHUB_SHA}^" 2>/dev/null || true)
          if [ -z "$PREV" ]; then
            # fallback to previous tag by creation date
            PREV=$(git tag --sort=-creatordate | grep -v -x "${GITHUB_REF_NAME}" | head -n 1 || true)
          fi
          echo "prev_tag=$PREV" >> "$GITHUB_OUTPUT"

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ steps.gitversion.outputs.SemVer }}"   # release tag from GitVersion
          TITLE="$TAG"
          PRERELEASE_FLAG=""
          if [ "${{ steps.branch_check.outputs.is_main }}" != "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          NOTES_ARGS="--generate-notes"
          if [ -n "${{ steps.prev.outputs.prev_tag }}" ]; then
            NOTES_ARGS="$NOTES_ARGS --notes-start-tag ${{ steps.prev.outputs.prev_tag }}"
          fi

          # create the release (and the tag if it does not exist), upload asset
          gh release create "$TAG" "artifact-${TAG}.zip" \
            --title "$TITLE" \
            $PRERELEASE_FLAG \
            $NOTES_ARGS \
            --target "$GITHUB_SHA"
