name: Auto Release on SemVer Change

on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: write

jobs:
  auto-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # 1. Calculate version using GitVersion
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '6.3.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4

      - name: Build Locale
        run: |
          mkdir -p build/TTT/lang
          dotnet restore Locale/Locale.csproj
          dotnet build Locale/Locale.csproj --no-restore -c Release
          cp lang/*.json build/TTT/lang

      - name: Publish Plugin
        run: |
          dotnet restore TTT/Plugin/Plugin.csproj
          dotnet publish TTT/Plugin/Plugin.csproj --no-restore -c Release -o build/TTT

      - name: Zip Artifacts
        run: |
          cd build/TTT
          zip -r TTT-${{ steps.gitversion.outputs.fullSemVer }}.zip *
          
      # 2. Get latest tag
      - name: Get latest tag
        id: latest_tag
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            echo "tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "tag=0.0.0" >> $GITHUB_OUTPUT
          fi

      # 3. Tag if new version
      - name: Create and push new tag
        if: steps.gitversion.outputs.fullSemVer != steps.latest_tag.outputs.tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.gitversion.outputs.fullSemVer }}
          git push origin ${{ steps.gitversion.outputs.fullSemVer }}

      # 4. Determine previous tag for changelog
      - name: Determine previous relevant tag
        id: prev_tag
        run: |
          branch="${GITHUB_REF_NAME}"
          if [[ "$branch" == "main" ]]; then
            prev=$(git tag --sort=-creatordate | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sed -n 2p)
          else
            prev=$(git tag --sort=-creatordate | grep -E '^[0-9]+\.[0-9]+\.[0-9]+-' | sed -n 2p)
          fi
          echo "tag=${prev:-0.0.0}" >> $GITHUB_OUTPUT

      # 5. Generate changelog
      - name: Generate changelog
        run: |
          gh api repos/${{ github.repository }}/compare/${{ steps.prev_tag.outputs.tag }}...${{ steps.gitversion.outputs.fullSemVer }} \
            --jq '.commits[].commit.message' > CHANGELOG.md
        env:
          GH_TOKEN: ${{ github.token }}

      # 6. Create release
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.gitversion.outputs.fullSemVer }}
          body_path: CHANGELOG.md
          prerelease: ${{ github.ref_name != 'main' }}
          files: build/TTT/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7. Cleanup old pre-releases
      - name: Delete old pre-releases
        if: github.ref_name != 'main'
        run: |
          gh release list --limit 100 --json name,isPrerelease \
            --jq '.[] | select(.isPrerelease) | .name' | tail -n +11 | \
            xargs -r -I {} gh release delete "{}" -y
        env:
          GH_TOKEN: ${{ github.token }}
